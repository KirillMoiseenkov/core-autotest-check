{\rtf1\ansi\ansicpg1252\cocoartf2821
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab560
\pard\pardeftab560\slleading20\partightenfactor0

\f0\fs26 \cf0 @startuml\
\
' \uc0\u1041 \u1072 \u1079 \u1086 \u1074 \u1099 \u1081  \u1080 \u1085 \u1090 \u1077 \u1088 \u1092 \u1077 \u1081 \u1089  ClientFactory\
interface IClientFactory \{\
    +createClient(String configPath, String format) : TestExecutor\
    +<T extends TestExecutor> createClient(String configPath, String format, Class<T> clientType) : T\
    +createClient(ExecutableEntity config) : TestExecutor\
    +<T extends TestExecutor> createClient(ExecutableEntity config, Class<T> clientType) : T\
    \
    +createEmbeddedClient(String configPath, String format) : IEmbeddedTestExecutor\
    +<T extends IEmbeddedTestExecutor> createEmbeddedClient(String configPath, String format, Class<T> clientType) : T\
    +createEmbeddedClient(ExecutableEntity config) : IEmbeddedTestExecutor\
    +<T extends IEmbeddedTestExecutor> createEmbeddedClient(ExecutableEntity config, Class<T> clientType) : T\
    \
    +registerFormat(String format, IConfigParser parser) : void\
    +getSupportedFormats() : List<String>\
\}\
\
' \uc0\u1048 \u1085 \u1090 \u1077 \u1088 \u1092 \u1077 \u1081 \u1089  \u1076 \u1083 \u1103  \u1087 \u1072 \u1088 \u1089 \u1080 \u1085 \u1075 \u1072  \u1082 \u1086 \u1085 \u1092 \u1080 \u1075 \u1091 \u1088 \u1072 \u1094 \u1080 \u1080 \
interface IConfigParser \{\
    +parse(String configPath) : Map<String, Object>\
    +parseToEntity(String configPath) : ExecutableEntity\
    +getFormatName() : String\
\}\
\
' \uc0\u1056 \u1077 \u1072 \u1083 \u1080 \u1079 \u1072 \u1094 \u1080 \u1080  \u1087 \u1072 \u1088 \u1089 \u1077 \u1088 \u1086 \u1074  \u1076 \u1083 \u1103  \u1088 \u1072 \u1079 \u1085 \u1099 \u1093  \u1092 \u1086 \u1088 \u1084 \u1072 \u1090 \u1086 \u1074 \
class JsonConfigParser \{\
    -objectMapper : ObjectMapper\
    +parse(String configPath) : Map<String, Object>\
    +parseToEntity(String configPath) : ExecutableEntity\
    +getFormatName() : String\
\}\
\
class YamlConfigParser \{\
    -yaml : Yaml\
    +parse(String configPath) : Map<String, Object>\
    +parseToEntity(String configPath) : ExecutableEntity\
    +getFormatName() : String\
\}\
\
class XmlConfigParser \{\
    -documentBuilder : DocumentBuilder\
    +parse(String configPath) : Map<String, Object>\
    +parseToEntity(String configPath) : ExecutableEntity\
    +getFormatName() : String\
\}\
\
class PropertiesConfigParser \{\
    -properties : Properties\
    +parse(String configPath) : Map<String, Object>\
    +parseToEntity(String configPath) : ExecutableEntity\
    +getFormatName() : String\
\}\
\
' \uc0\u1056 \u1077 \u1072 \u1083 \u1080 \u1079 \u1072 \u1094 \u1080 \u1103  ClientFactory\
class ClientFactoryImpl \{\
    -parsers : Map<String, IConfigParser>\
    -clientMappings : Map<String, Class<? extends TestExecutor>>\
    -embeddedClientMappings : Map<String, Class<? extends IEmbeddedTestExecutor>>\
    +createClient(String configPath, String format) : TestExecutor\
    +<T extends TestExecutor> createClient(String configPath, String format, Class<T> clientType) : T\
    +createClient(ExecutableEntity config) : TestExecutor\
    +<T extends TestExecutor> createClient(ExecutableEntity config, Class<T> clientType) : T\
    +createEmbeddedClient(String configPath, String format) : IEmbeddedTestExecutor\
    +<T extends IEmbeddedTestExecutor> createEmbeddedClient(String configPath, String format, Class<T> clientType) : T\
    +createEmbeddedClient(ExecutableEntity config) : IEmbeddedTestExecutor\
    +<T extends IEmbeddedTestExecutor> createEmbeddedClient(ExecutableEntity config, Class<T> clientType) : T\
    +registerFormat(String format, IConfigParser parser) : void\
    +getSupportedFormats() : List<String>\
\}\
\
' \uc0\u1052 \u1080 \u1085 \u1080 \u1084 \u1072 \u1083 \u1100 \u1085 \u1072 \u1103  \u1089 \u1074 \u1103 \u1079 \u1100  \u1089  TestExecutor \u1080  IEmbeddedTestExecutor\
interface TestExecutor \{\
    ' \uc0\u1059 \u1087 \u1088 \u1086 \u1097 \u1077 \u1085 \u1085 \u1086 \u1077  \u1087 \u1088 \u1077 \u1076 \u1089 \u1090 \u1072 \u1074 \u1083 \u1077 \u1085 \u1080 \u1077 \
    +execute(Map<String, Object> config) : Map<String, Object>\
\}\
\
interface IEmbeddedTestExecutor \{\
    ' \uc0\u1059 \u1087 \u1088 \u1086 \u1097 \u1077 \u1085 \u1085 \u1086 \u1077  \u1087 \u1088 \u1077 \u1076 \u1089 \u1090 \u1072 \u1074 \u1083 \u1077 \u1085 \u1080 \u1077 \
    +startEmbedded() : void\
\}\
\
' \uc0\u1050 \u1072 \u1089 \u1090 \u1086 \u1084 \u1085 \u1072 \u1103  \u1086 \u1073 \u1077 \u1088 \u1090 \u1082 \u1072 \
class ExecutableEntity \{\
    -data : Map<String, Object>\
    -metadata : Map<String, String>\
    +getData() : Map<String, Object>\
    +getMetadata() : Map<String, String>\
    +toHashMap() : Map<String, Object>\
    +fromHashMap(Map<String, Object>) : ExecutableEntity\
\}\
\
' \uc0\u1053 \u1072 \u1089 \u1083 \u1077 \u1076 \u1086 \u1074 \u1072 \u1085 \u1080 \u1077  \u1080  \u1079 \u1072 \u1074 \u1080 \u1089 \u1080 \u1084 \u1086 \u1089 \u1090 \u1080 \
IClientFactory <|.. ClientFactoryImpl\
IConfigParser <|.. JsonConfigParser\
IConfigParser <|.. YamlConfigParser\
IConfigParser <|.. XmlConfigParser\
IConfigParser <|.. PropertiesConfigParser\
\
ClientFactoryImpl o--> "many" IConfigParser : uses\
ClientFactoryImpl --> TestExecutor : creates\
ClientFactoryImpl --> IEmbeddedTestExecutor : creates\
ClientFactoryImpl --> ExecutableEntity : uses\
\
@enduml}